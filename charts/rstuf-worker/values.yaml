# Default values for rstuf-worker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/repository-service-tuf/repository-service-tuf-worker
  pullPolicy: IfNotPresent
  tag: "v1.0.0rc1"

livenessProbe:
  exec:
    # bash is needed to replace the environment variable
    command: [
      "bash",
      "-c",
      "RSTUF_WORKER_ID=$HOSTNAME celery -A app inspect ping rstuf@$HOSTNAME,rstuf_jobs@$HOSTNAME"
    ]
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 10
readinessProbe:
  exec:
    command:
      [
        "/usr/local/bin/python",
        "-c",
        "\"import os;os.environ['RSTUF_WORKER_ID']=os.environ['HOSTNAME'];from app import app;exit(0 if os.environ['HOSTNAME'] in ','.join(app.control.inspect(app=app).stats().keys()) else 1)\""
      ]

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

storage:
  type: "AWSS3"    # AWSS3 or localStorage
  storagePath: ""  # required only when using `storageBackend` as "localStorage"
  s3Bucket: "tuf-metadata"
aws:
  accessKey: "s3-keyid"
  secretKey: "s3-access-key"
  region: ""
  endpoint: ""
  s3_object_acl: ""  # default is public-read
gcp:
  # Use applicationCredentials as base64
  applicationCredentials: ""

backend:
  brokerServer: "redis://redis"
  redisServer: "redis://redis"
  dbServer: "postgresql://postgres:password@postgres:5432"
  # lockTimeOut default 60 seconds
  lockTimeOut: ""
  # redisPort default is 5672
  redisPort: ""
  # redisDbResultdefault is 0
  redisDbResult: ""
  # redisDbSettings default is 1
  redisDbSettings: ""

brokerSsl:
  enabled: false
  mountPath: "/run/secrets/broker_ssl"
  keyData: ""
  certData: ""
  caData: ""
  keyFileName: "tls.key"
  certFileName: "tls.crt"
  caFileName: "ca.crt"

# using online key as file in seccrets
# onlineKeyDir: "/run/secrets"
# onlineKeyFile:
#   - keyid: 0d9d3d4bad91c455bc03921daa95774576b86625ac45570d0cac025b08e65043
#     # pem must be base64 encoded
#     pem: |
#       LS0tLS1CRUdJTi(...)

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
