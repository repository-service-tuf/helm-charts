# Default values for rstuf-worker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/repository-service-tuf/repository-service-tuf-worker
  pullPolicy: IfNotPresent
  tag: "v0.17.0b1"

livenessProbe:
  exec:
    # bash is needed to replace the environment variable
    command: [
      "bash",
      "-c",
      "RSTUF_WORKER_ID=$HOSTNAME celery -A app inspect ping rstuf@$HOSTNAME,rstuf_jobs@$HOSTNAME"
    ]
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 10
readinessProbe:
  exec:
    command:
      [
        "/usr/local/bin/python",
        "-c",
        "\"import os;os.environ['RSTUF_WORKER_ID']=os.environ['HOSTNAME'];from app import app;exit(0 if os.environ['HOSTNAME'] in ','.join(app.control.inspect(app=app).stats().keys()) else 1)\""
      ]

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

storage:
    type: "AWSS3"    # AWSS3 or localStorage
    storagePath: ""  # required only when using `storageBackend` as "localStorage"
    onlineKeyDir: "" # optional when using `storageBackend` as "localStorage"
    s3Bucket: "tuf-metadata"
    s3KeyId: "s3-keyid"
    s3AccessKey: "s3-access-key"
    s3Region: ""
    s3Endpoint: ""

backend:
  brokerServer: "redis://redis"
  redisServer: "redis://redis"
  dbServer: "postgresql://postgres:password@postgres:5432"
  lockTimeOut: "" # default 60 seconds
  redisPort: ""  # default is 5672
  redisDbResult: "" # default is 0
  redisDbSettings: "" # default is 1

# using online key as file
# onlineKeyDir: "/run/secrets"
# onlineKeyFile:
#   - keyid: 0d9d3d4bad91c455bc03921daa95774576b86625ac45570d0cac025b08e65043
#     # pem must be base64 encoded
#     pem: |
#       LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd0pOdG1KeTBia3kwVlpIaEpvVndWUjBvSXRvOG5kTExpY25hSFBEVWZGc3YyZFRQCjUwdUxpWXVZaFUvUkxUaCtQSU1tOWRVNWd2ZlNRMFlJVUZIT2ZkY0RDQmFNTllSOXo5YzlrdldrZmd4UDRIN2MKTWR5OWV2M3loNHBMK3VhNjRBVDE1OThReG1GMFJTcDlwOFA0VURQSkM0WHNnVnoza0tlQ1NRQWd6MDJNSitLZApIeVREUCtyZ091V1FmVkw4Yno1M3B1TVNTRm9qaWFFSlRtWlE3ZUJuSTJuNlVGNkFBVjZlbzZEYzRjZ1BRTFNqCmhEcWNmb0hDeWsvQXpwVFFPNUVWK2Fob2ZZbVYva1FRdHI3Z3o4TVFYb0tSd0NiZkljV2hQeWZQTlJlT283ZnEKVkszdUsza2tEMW91b05TcjlERlJjblVic1g0UVIvQ1FMY29QWHdJREFRQUJBb0lCQUVXVndCZFNJSHh1cVFiMgpoSFhINTlSSmlkUTJLWXNadlVSWHRNR2FZQjFqVWNJVGZPQmwwdERycVR3YW9Fb0h6TTJPMG9nbitQVVRHVjRICnN6OWFvQk9tbXNqVVpPdDlxWHh0bVNrK0s2Y0VTZVNqMG1zT0NVV2s5M3IwaFFudlQzMWRMWUlRZjE0L25xVFQKZXI0aE9OdTZLcDVJVVRKWlpuZFZuK1ZDNzVnWUc3Y2NPYys3ODkwb085ZTdvaFBmRUJ4Z3IrV0ZlYVNQZ2xhSwpybXFobkN4czV5b1B2bGl0aW1VVDMzdjJkMUtQYzJYOEo1RkpQdXlNcUU5RXdOQ01pZlByNjc3R1FUNlU2ZGxKCkFtRHpJNk9LM0F5c3B2UXhLS2Zva1NuQzhuNm90bk1MYll6RktoY3RBQlVUZkRvZENhVXg2NzB1ZGl5ZzdaaTYKdXZtQzhha0NnWUVBNko5Z2lQWWVRMEJsdnZwbFBjZmlqMTQ4dHVLU0x5bThqVGRSWHhnNW8zZE5XZWl5NjQ0WQpYY3dyTXVRQTdYb2RaU0licHVqTU1Zb2VZNE5lSzNnQU90MVlDREVmZTZyYXZ2ZnJad1BhWHV0ZGtTTDFDUjNBCjREUC9RcFJYN3BXV3RmVVBoTmhMbTY3b0l4dFdNa3BtK2JmME1ZK3Q4dGMwc0dWdXlNRG52WlVDZ1lFQTArM0gKdUV0WENwNDhraCtMMFFoNDAyekhNMzZ4ZWRaUWROZGdLWFQ0dWFLZ001VzZldWx6c0FzMTVyVVFSZmFTT1FjWApCTWtzQkxEZkNJa2Z2aDlWN3BwQkRwNTR4ak1Jc09JN0FMNkUyZHdHSEdDQmdYMkxjY3lGRXhFZXViTUF3TnZlCk52cERUdzVYMHpFdmF4MmJQaXcrZjRqbUJQQ1F6cE5oNXdnOWxDTUNnWUVBNFBXUUU2Ti83S1dRUDdwQ3doWlYKZ1RRdkh1WEpYUmJOb3Z0R0UrS0hpdy9LbkJJdlJTRXJhem9RNUt3ZVFZb0FkMWNleXJFREZ6MXMyZXVtMi82MgpxalozOWFRYndDcWdWR0hKSXR4VkI4b3h1RFBJSjhMQVRaRzdYeFc2VzU0S0cza2NRdW94WkNNbmx4dk9wZC9SCjZkajlyQmc0cmtsMFNNb3U4ckdxNm1rQ2dZRUFnSWNhc3ZodUozQmtCN0srRnQzdWVUcmxiS09QZXZheEFNdUYKOUY2T1lmYnc5WmYrNm9BZXUwdHhPeVBnWkszdmJFcVNlVUtRUWFBTEE2QTE4aFlMQlpQamxMd2pQd0RBYXBZcApkb0FWRGhOVVdXMWwzV1NJWjFIRCt4Wk03ZzVUaktOTGwwZ2IvaHdTdzNCMjg1MlhBeFBPSzRhWkNiSGtBSVI5CndhSEx4c1VDZ1lBNGxyR2VlMDM1SjVseGd3M0xJaThhZEpPZlBGNmw2bEZBY0VxMDJyaloyU014QmZlOGRzOWMKVUIrUTdTNnFwTi9yWEVqYmREMHpRZEhRMDN5czN3NVhtVVZCeW1FVDZXOTR0d0F2RW9RNUJsU2VzZ3lRdjVWYwpDMEc0ajN1ZEUzNUhNUVBKbjAwdmJIOG5yemdseENGMVc1MkF5QVZNYjNIbllRdk9BM0lCa3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
